using CoreDevextremeTheme.Settings;

internal class Program
{
    private static void Main(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);

        // Add services to the container.
        var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
        builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(connectionString));
        builder.Services.AddDatabaseDeveloperPageExceptionFilter();

        builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = false)
                        .AddRoles<IdentityRole>()
                        .AddEntityFrameworkStores<ApplicationDbContext>();
        
        builder.Services.AddControllersWithViews();

        builder.Services.AddAuthentication();
        builder.Services.AddAuthorization();
        builder.Services.AddControllersWithViews();
        builder.Services.AddRazorPages();
        builder.Services.AddHttpContextAccessor();

        RotativaConfiguration.Setup(builder.Environment.WebRootPath, "Rotativa");

        builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

        //EnableSensitiveDataLogging
        builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(connectionString, b => b.MigrationsAssembly("CoreDevextremeTheme")).EnableSensitiveDataLogging());

        builder.Services.Configure<EmailSettings>(options => builder.Configuration.GetSection("EmailSettings").Bind(options));
               

        // Add ToastNotification
        builder.Services.AddNotyf(config =>
        {
            config.DurationInSeconds = 5;
            config.IsDismissable = true;
            config.Position = NotyfPosition.BottomRight;
        });

        builder.Services.AddTransient<IEmailSender, EmailSender>();

        var app = builder.Build();

        if (app.Environment.IsDevelopment())
        {
            using (var scope = app.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                if (context.Database.GetPendingMigrations().Any())
                    context.Database.Migrate();

                //if (!context.Departments.Any())
                DbInitializer.Seed(context);
            }
        }

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseMigrationsEndPoint();
        }
        else
        {
            app.UseExceptionHandler("/Home/Error");
            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
        }

        app.UseHttpsRedirection();
        app.UseStaticFiles();

        app.UseRouting();

        app.UseAuthentication();

        app.UseAuthorization();

        app.MapControllers();

        app.MapControllerRoute(name: "default", pattern: "{controller=Home}/{action=Index}/{id?}");

        app.UseNotyf();

        app.MapRazorPages();

        new Timer(UpdateDataFromNow, null, TimeSpan.Zero, TimeSpan.FromSeconds(1000));
        app.Run();

    }

    //private static Timer _timer;

    private static void UpdateDataFromNow(object state)
    {
        //Console.WriteLine("Stoklar Db2 veritabanından güncellendi!");
    }

}